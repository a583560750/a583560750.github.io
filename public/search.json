[{"title":"分享三个Aria2的web前端","url":"/2019/07/10/2019-07-10-分享三个Aria2的web前端/","content":"看图说话吧！\n\nAriaNg：\n\n<img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/im201907/annex/master/20190705173500.jpg\" width=\"1139\" height=\"476\" />\n\nwebui-aria2：\n\n<img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/im201907/annex/master/20190705173607.jpg\" width=\"825\" height=\"799\" />\n\nyaaw：\n\n<img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/im201907/annex/master/20190705173705.jpg\" width=\"1275\" height=\"349\" />\n\n<a href=\"http://www.liangshitian.top/blog/download.php?url=https://pan.baidu.com/s/1AO29aBsCdGLQ4U-txXxUOA\" target=\"_blank\" rel=\"noopener\">点我下载（提取码： jib9）</a>","tags":["aria2","下载","html"],"categories":["-资源分享"]},{"title":"SoundWire - 一个能将电脑声音无线传输到 Android 手机上播放的神器","url":"/2019/07/10/2019-07-10-SoundWire - 一个能将电脑声音无线传输到 Android 手机上播放的神器/","content":"<strong>SoundWire</strong> 是一款有创意而又实用的免费虚拟声卡软件，支持将 Windows、Linux 系统以及树莓派的声音通过 WIFI 局域网无线传输串流到你的 Android 手机上播放。 SoundWire 软件的使用很简单，只需手机跟电脑是处在同一个局域网里即可。还在苦于台式电脑无外置音响吗，赶紧来体验吧！\n\n<a href=\"http://www.liangshitian.top/go.php?url=http://georgielabs.net/\">SoundWire官网</a>\n\n使用教程：\n\n1、双击安装对应操作系统的SoundWire_Server_setup.exe程序，然后打开\n\n<img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/im201907/annex/master/20190708100510.jpg\" width=\"562\" height=\"427\" />\n\n2、配置防火墙\n\n控制面板--Windows防火墙--允许应用通过Windows防火墙进行通信，勾选允许点击确定\n\n<img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/im201907/annex/master/20190708102918.png\" width=\"865\" height=\"504\" />\n\n3、Android 手机安装SoundWire客户端后打开，在服务器中输入PC端SoundWire中的IP地址，再点击图标连接，查看PC端显示绿色的connect即可成功\n\n<img class=\"alignnone size-medium\" src=\"https://raw.githubusercontent.com/im201907/annex/master/20190708103130.jpg\" width=\"540\" height=\"1079\" />\n\n<a href=\"http://www.liangshitian.top/blog/download.php?url=https://pan.baidu.com/s/1Db11NtlHRAZH8qi63lW3tA\" target=\"_blank\" rel=\"noopener\">点我下载（提取码：evze）</a>\n\n疑问：\n\n1、输入PC端SoundWire显示的IP还是连接不了?\n\n答：请确认SoundWire显示的IP是否与Android手机连接WIFI的IP为同一局域网，如不是，请禁用部分网卡再打开SoundWire服务端\n\n2、连接成功后为什么没有声音?\n\n答：请检查手机是否为静音，如不是，请在PC端SoundWire中选择不同的声卡进行调试","tags":["声音","无线"],"categories":["-资源分享"]},{"title":"N1安装webmin","url":"/2019/02/27/2019-02-27-N1安装webmin/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n添加webmin源\n<pre><code class=\"language-css\">vi /etc/apt/sources.list</code></pre>\n在末尾处添加\n<pre><code class=\"language-css\">deb http://download.webmin.com/download/repository sarge contrib</code></pre>\n<pre><code class=\"language-css\">deb http://webmin.mirror.somersettechsolutions.co.uk/repository sarge contrib</code></pre>\n安装 GPG key\n<pre><code class=\"language-css\">cd /root\nwget http://www.webmin.com/jcameron-key.asc\napt-key add jcameron-key.asc</code></pre>\n安装webmin\n<pre><code class=\"language-css\">apt-get update\napt-get install webmin</code></pre>\n访问https://ip:10000即可，账号密码为登录N1的root用户（必须为https访问）","tags":["N1","斐讯","webmin"],"categories":["-N1"]},{"title":"N1开启zerotier穿透","url":"/2019/02/22/2019-02-22-N1开启zerotier穿透/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n先去http://www.zerotier.com/注册账户，创建Network，获取Network ID，然后回到N1中把zerotier源码拉下来\n\n<pre><code class=\"language-css\">root@amlogic:~# git clone https://github.com/zerotier/ZeroTierOne.git</code></pre>\n\n然后进入ZeroTierOne目录，开始编译安装  \n<pre><code class=\"language-css\">root@amlogic:~# cd ZeroTierOne/  \nroot@amlogic:~/ZeroTierOne# make selftest  \nroot@amlogic:~/ZeroTierOne# make && make install</code></pre>\n\n把zerotier服务拷贝到amlogic系统服务目录中，然后重新加载下，再启动zerotier服务  \n<pre><code class=\"language-css\">root@amlogic:~/ZeroTierOne# cp debian/zerotier-one.service /etc/systemd/system  \nroot@amlogic:~/ZeroTierOne# systemctl daemon-reload  \nroot@amlogic:~/ZeroTierOne# systemctl start zerotier-one</code></pre>\n\n加入之前局域网，XXXXXXXXXX为ZeroTier中创建的Network ID  \n<pre><code class=\"language-css\">root@amlogic:/var/lib/zerotier-one# zerotier-cli join XXXXXXXXXX</code></pre>","tags":["内网穿透","穿透","N1","斐讯","zerotier","局域网"],"categories":["-N1"]},{"title":"Windows后台运行Bat批处理","url":"/2019/02/22/2019-02-22-Windows后台运行Bat批处理/","content":"\n# 方法一: #\nbat里有隐藏窗口的命令，很简单，只需要在代码头部加一段代码就可以了。\n \n<pre><code class=\"language-css\">@echo off   \nif \"%1\" == \"h\" goto begin \nmshtavbscript:createobject(\"wscript.shell\").run(\"%~nx0 h\",0)(window.close)&&exit   \n:begin  \n下面是你自己的代码。</code></pre>\n# 方法二: #\n可以编辑一个vbs脚本，在其中以隐藏窗口运行批处理程序。  \n<pre><code class=\"language-css\">Set ws = CreateObject(\"Wscript.Shell\")  \nws.run \"cmd /c 1.bat\",vbhide</code></pre>\n \n以上代码拷贝到记事本中，保存为\"1.vbs\"或者其它的名字（扩展名必须是.vbs），然后点击运行生成的脚本1.vbs，即可隐藏运行指定的批处理程序。\n","tags":["Windows","后台运行","bat","批处理"],"categories":["-windows"]},{"title":"N1_ubuntu安装ss客户端","url":"/2019/02/22/2019-02-22-N1_ubuntu安装ss客户端/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n一、安装SS客户端  \n1、安装pip  \n<pre><code class=\"language-css\">apt install python-gevent python-pip</code></pre>\n\n2、安装ss  \n<pre><code class=\"language-css\">pip install shadowsocks</code></pre>\n\n3、生成配置文件   \n<pre><code class=\"language-css\">vi /etc/shadowsocks.json\n\n{  \n\"server\":\"your_server_ip\", #ss服务器IP\n\n\"server_port\":your_server_port, #端口\n\n\"local_address\": \"127.0.0.1\", #本地ip\n\n\"local_port\":1080, #本地端口\n\n\"password\":\"your_server_passwd\", #连接ss密码\n\n\"timeout\":300, #等待超时\n\n\"method\":\"rc4-md5\", #加密方式\n\n\"fast_open\": false,\n  \n  # true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。开启方法： echo 3 > /proc/sys/net/ipv4/tcp_fastopen 开启之后，将 fast_open 的配置设置为 true 即可\n\n\"workers\": 1 # 工作线程数  \n}</code></pre>\n\n4、后台运行  \n<pre><code class=\"language-css\">nohup sslocal -c /etc/shadowsocks.json /dev/null 2>&1 & </code></pre>\n\n5、验证Shadowsocks客户端服务是否正常运行  \n<pre><code class=\"language-css\">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</code></pre>\n出现SS服务器IP地址即运行正常\n\n二、设置代理  \n\n1、安装privox  \n<pre><code class=\"language-css\">apt-get install privoxy -y</code></pre> \n启动privoxy服务  \n<pre><code class=\"language-css\">systemctl enable privoxy  \nsystemctl start privoxy  \nsystemctl status privoxy</code></pre>\n\n2、配置privoxy\n<pre><code class=\"language-css\">vi /etc/privoxy/config 添加socks5代理，如下:\n\nlisten-address 127.0.0.1:8118 # 8118 是默认端口，不用改  \nforward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点</code></pre>\n\n3、设置http、https代理\n<pre><code class=\"language-css\">vi /etc/profile 在最后添加如下信息  \nPROXY_HOST=127.0.0.1  \nexport all_proxy=http://$PROXY_HOST:8118  \nexport ftp_proxy=http://$PROXY_HOST:8118  \nexport http_proxy=http://$PROXY_HOST:8118  \nexport https_proxy=http://$PROXY_HOST:8118  \nexport no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16</code></pre>\n重载环境变量  \n<pre><code class=\"language-css\"> source /etc/profile</code></pre>\n\n遇到的坑：  \n1、pip安装ss报错解决  \n<pre><code class=\"language-css\">vi /usr/bin/pip  \n解决方案：  \n原：from pip import main   \n修改后：from pip._internal import main</code></pre>\n\n2、SS报错1  \n<pre><code class=\"language-css\">AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol  \n解决方案：  \n\n修改/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py  \n\nlibcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)  \n替换成  \nlibcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)  \n\nlibcrypto.EVP_CIPHER_CTX_cleanup  \n替换成  \nlibcrypto.EVP_CIPHER_CTX_reset</code></pre>\n\n3、SS报错2  \n![](https://raw.githubusercontent.com/a512154224/a512154224.github.io/master/picture/1004489021.jpg)\n\n解决方案：  \n  \n<pre><code class=\"language-css\">vi /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py  \n\nlibcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)   \n改成：  \nlibcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)  \n\nlibcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)   \n改成：  \nlibcrypto.EVP_CIPHER_CTX_reset(self._ctx)\n\n取消代理命令  \nwhile read var; do unset $var; done < <(env | grep -i proxy | awk -F= '{print $1}')</code></pre>\n","tags":["N1","斐讯","NAS","SS","代理"],"categories":["-N1"]},{"title":"在浏览器收藏夹显示网站图标","url":"/2019/02/22/2019-02-22-在浏览器地址栏显示网站图标/","content":"\n可在浏览器地址栏与收藏夹显示网站图标\n方法一：  \n制作一个16x16的icon图标，命名为favicon.ico，然后直接放在网站的根目录  \n方法二：  \n制作一个16x16的icon图标，命名为xx.ico（命名随意），放在根目录下。然后将下面的代码嵌入head区：\n![](https://raw.githubusercontent.com/a512154224/a512154224.github.io/master/picture/1004489023.jpg)\n<link rel=\"icon\" href=\"/xx.ico\" type=\"image/x-icon\" />\n<link rel=\"shortcut icon\" href=\"/xx.ico\" type=\"image/x-icon\" />\n\n\n刷新或清除缓存即可看到效果","tags":["网站图标","ico","HTML"],"categories":["-编码建站"]},{"title":"Ubuntu可用国内源","url":"/2019/02/22/2019-02-22-N1可用的Ubuntu源（国内）/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n<pre><code class=\"language-css\">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse  \n\ndeb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse\n\ndeb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse\n\ndeb https://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse\n</code></pre>","tags":["ubuntu","N1","斐讯","可用源"],"categories":["-N1"]},{"title":"N1安装NFS服务端","url":"/2019/02/22/2019-02-22-N1安装NFS服务端/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n安装NFS服务  \n<pre><code class=\"language-css\">apt install nfs-kernel-server</code></pre>\n\n编写配置文件  \n<pre><code class=\"language-css\">vi /etc/exports\n\n/etc/exports文件的内容如下：  \n/tmp *(rw,sync,no_subtree_check,no_root_squash)  \n/media/sda1/share *(rw,sync,no_subtree_check,no_root_squash)  \n/logs *(rw,sync,no_subtree_check,no_root_squash)</code></pre>\n\n创建共享目录  \n在服务器端创建/tmp /data和/logs共享目录\n<pre><code class=\"language-css\">sudo mkdir -p /tmp  \nsudo mkdir -p /data  \nsudo mkdir -p /logs</code></pre>\n\n重启nfs服务：  \n<pre><code class=\"language-css\">service nfs-kernel-server restart</code></pre>","tags":["N1","斐讯","NAS","NFS"],"categories":["-N1"]},{"title":"N1安装bypy同步百度云","url":"/2019/02/22/2019-02-22-N1安装bypy同步百度云/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n安装pip  \n<pre><code class=\"language-css\">root@amlogic:~#apt-get install python-pip</code></pre>\n\n安装python的requests库  \n<pre><code class=\"language-css\">root@amlogic:~#apt-get install python-requests</code></pre>\n\n安装bypy  \n<pre><code class=\"language-css\">root@amlogic:~#pip install bypy</code></pre>\n\n授权  \n<pre><code class=\"language-css\">root@amlogic:~#bypy info </code></pre> \n出现一个网址，在浏览器中打开，并在网址中复制授权码，然后再终端Press [Enter] when you are done\n下方粘贴复制的授权码，回车，等待完成即可，完成后在百度网盘的【我的应用数据】下面已经多了一个目录，【bypy】，bypy所上传的文件都会在这个目录下面，只能下载该目录里面的文件。\n\n上传单个文件的命令如下：bypy upload 文件名，如：  \n<pre><code class=\"language-css\">bypy upload 上传的文件名字</code></pre>\n\n把当前目录同步到云盘，下面两个命令都可以  \n<pre><code class=\"language-css\">bypy syncup 目录地址  \nbypy upload 目录地址</code></pre>\n\n下载单个文件  \n<pre><code class=\"language-css\">bypy downfile 下载文件名</code></pre>\n\n把云盘内容下载到本地来，下面两个命令也可以  \n<pre><code class=\"language-css\">bypy syncdown 目录地址  \nbypy downdir 目录地址</code></pre>\n\n定时上传  \n进入编辑crontab  \n<pre><code class=\"language-css\">root@amlogic:~#crontab -e</code></pre>\n\n添加每隔5分钟执行一次上传命令  \n<pre><code class=\"language-css\">*/5 * * * * bypy upload /var/www/html/syncloud/data/liangst/files >> /bypyupload.log</code></pre>\n\n重启cron 服务  \n<pre><code class=\"language-css\">root@amlogic:~#service cron restart</code></pre>","tags":["N1","斐讯","百度云","同步","bypy"],"categories":["-N1"]},{"title":"N1安装supervisor（管理进程）","url":"/2019/02/22/2019-02-22-N1安装supervisor（管理进程）/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n用python安装  \n<pre><code class=\"language-css\">root@amlogic:~#apt-get install python-setuptools  \nroot@amlogic:~#wget https://bootstrap.pypa.io/ez_setup.py -O - | python  \nroot@amlogic:~#easy_install supervisor</code></pre>  \n\n\n生成默认配置文件(supervisord.conf)\n\n<pre><code class=\"language-css\">root@amlogic:~#echo_supervisord_conf > /etc/supervisord.conf</code></pre>\n\n\n管理进程  \n编辑supervisor配置文件  \n<pre><code class=\"language-css\">root@amlogic:~#vi /etc/supervisord.conf </code></pre> \n把以下内容加到/etc/supervisord.conf尾部  \n<pre><code class=\"language-css\">[program:py-kms]  \ncommand=python /usr/local/py-kms/server.py  \nautorestart=true  \nuser=root</code></pre>\n\n\n以daemon方式运行，执行  \n<pre><code class=\"language-css\">supervisord</code></pre>\n\n停止supervisord  \n<pre><code class=\"language-css\">supervisorctl shutdown</code></pre>\n\n重新加载配置文件  \n<pre><code class=\"language-css\">supervisorctl reload</code></pre>\n\n\n[进程管理]\n启动supervisord管理的所有进程  \n<pre><code class=\"language-css\">supervisorctl start all</code></pre>\n\n停止supervisord管理的所有进程  \n<pre><code class=\"language-css\">supervisorctl stop all</code></pre>\n\n启动supervisord管理的某一个特定进程  \n<pre><code class=\"language-css\">supervisorctl start program-name // program-name为[program:xx]中的xx</code></pre>\n\n停止supervisord管理的某一个特定进程  \n<pre><code class=\"language-css\">supervisorctl stop program-name  // program-name为[program:xx]中的xx</code></pre>\n\n重启所有进程或所有进程  \n<pre><code class=\"language-css\">supervisorctl restart all  // 重启所有  \nsupervisorctl reatart program-name // 重启某一进程，program-name为[program:xx]中的xx</code></pre>\n\n查看supervisord当前管理的所有进程的状态  \n<pre><code class=\"language-css\">supervisorctl status</code></pre>\n\n需要开机启动的话，在/etc/rc.local尾部添加supervisord即可（exit 0前）","tags":["N1","斐讯","开机启动","supervisor","进程管理","服务管理"],"categories":["-N1"]},{"title":"Windows伪装文件夹","url":"/2019/02/22/2019-02-22-Windows伪装文件夹/","content":"\n随便一个盘里建一个文件夹 然后把你想隐藏的东西放到文件夹里然后给文件夹命名为“123.{21ec2020-3aea-1069-a2dd-08002b30309d}” （123是随便打的名字，也可以打成别的名，不过最好是数字或字母，不要打汉字）  \n恢复：把你的控制面板的文件夹改回123或你自己命名的名字，打开运行，cmd，文件夹所在盘，-ren 123.{21ec2020-3aea-1069-a2dd-08002b30309d} 123  \n文件夹重命名为：\n<pre><code class=\"language-css\">网上邻居.{208D2C60-3AEA-1069-A2D7-08002B30309D}  </code></pre>\n还原方法：运行-cmd-cd desktop-ren 网上邻居.{208D2C60-3AEA-1069-A2D7-08002B30309D} 123  \n \n附上常用电脑类标识符CLSID：\n<pre><code class=\"language-css\">  excel.{00020810-0000-0000-C000-000000000046}  \nword.{00020900-0000-0000-C000-000000000046}  \nmedia.{00022603-0000-0000-C000-000000000046}  \nCAB.{0CD7A5C0-9F37-11CE-AE65-08002B2E1262}  \n计划任务.{148BD520-A2AB-11CE-B11F-00AA00530503}  \n搜索-计算机{1f4de370-d627-11d1-ba4f-00a0c91eedba}  \n网上邻居.{208D2C60-3AEA-1069-A2D7-08002B30309D}  \n我的电脑.{20D04FE0-3AEA-1069-A2D8-08002B30309D}  \n控制面板.{21EC2020-3AEA-1069-A2DD-08002B30309D}  \n打印机.{2227A280-3AEA-1069-A2DE-08002B30309D}  \nhtml.{25336920-03f9-11cf-8fd0-00aa00686f13}  \nmht.{3050F3D9-98B5-11CF-BB82-00AA00BDCE0B}  \nmshta.{3050f4d8-98B5-11CF-BB82-00AA00BDCE0B}  \n我的文档.{450D8FBA-AD25-11D0-98A8-0800361B1103}  \nXML.{48123bc4-99d9-11d1-a6b3-00c04fd91555}  \n回收站(满).{5ef4af3a-f726-11d0-b8a2-00c04fc309a4}  \n回收站.{645FF040-5081-101B-9F08-00AA002F954E}  \nftp_folder.{63da6ec0-2e98-11cf-8d82-444553540000}  \n网络和拨号连接.{7007ACC7-3202-11D1-AAD2-00805FC1270E}  \n写字板文档.{73FDDC80-AEA9-101A-98A7-00AA00374959}  \nTemporary Offline Files Cleaner.{750fdf0f-2a26-11d1-a3ea-080036587f03}  \n用户和密码.{7A9D77BD-5403-11d2-8785-2E0420524153}  \nInternet 临时文件.{7BD29E00-76C1-11CF-9DD0-00A0C9034933}  \n已下载的程序文件的清除程序.{8369AB20-56C9-11D0-94E8-00AA0059CE02}  \n公文包.{85BBD920-42A0-1069-A2E4-08002B30309D}  \nActiveX 高速缓存文件夹.{88C6C381-2E85-11D0-94DE-444553540000}    \nmail.{9E56BE60-C50F-11CF-9A2C-00A0C90A90CE}  \n历史记录.{FF393560-C2A7-11CF-BFF4-444553540000}    \n目录.{fe1290f0-cfbd-11cf-a330-00aa00c16e65}  \nInternet Explorer.{FBF23B42-E3F0-101B-8488-00AA003E56F8}  \nSnapshot File.{FACB5ED2-7F99-11D0-ADE2-00A0C90DC8D9}  \n预订文件夹.{F5175861-2688-11d0-9C5E-00AA00A45957}  \nMyDocs Drop Target.{ECF03A32-103D-11d2-854D-006008059367}  \nPolicy Package.{ecabaebd-7f19-11d2-978E-0000f8757e2a}  \n搜索结果.{e17d4fc0-5564-11d1-83f2-00a0c90dc849}  \n添加网上邻居.{D4480A50-BA28-11d1-8E75-00C04FA31A86}  \nPaint.{D3E34B21-9D75-101A-8C3D-00AA001A1652}  \n管理工具.{D20EA4E1-3957-11d2-A40B-0C5020524153}  \n字体.{D20EA4E1-3957-11d2-A40B-0C5020524152}  \nWeb Folders.{BDEADF00-C265-11d0-BCED-00A0C90AB50F}  \nDocFind Command.{B005E690-678D-11d1-B758-00A0C90564FE}  \n脱机文件夹.{AFDB1F70-2A4C-11d2-9039-00C04F8EEB3E}  \n打印机.{2227A280-3AEA-1069-A2DE-08002B30309D}  \n上帝模式.{ED7BA470-8E54-465E-825C-99712043E01C}</code></pre>\n","tags":["Windows","伪装","文件夹","隐藏"],"categories":["-windows"]},{"title":"N1安装samba(访客模式)","url":"/2019/02/22/2019-02-22-N1安装samba(访客模式)/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n安装samba服务  \n<pre><code class=\"language-css\">apt-get install samba samba-common</code></pre>\n\n修改samba配置文件添加无密码共享  \n<pre><code class=\"language-css\">/etc/samba/smb.conf</code></pre> \n在尾部添加以下内容  \n<pre><code class=\"language-css\">[share]\n    \ncomment = share  \npath = /media/sda1/share  \npublic = yes  \nwritable = yes  \nbrowseable=yes  \navailable=yes  \nguest ok=yes</code></pre>\n重启服务  \n<pre><code class=\"language-css\">service smbd restart</code></pre>","tags":["N1","斐讯","NAS","samba","访客"],"categories":["-N1"]},{"title":"N1开机挂载NTFS分区","url":"/2019/02/22/2019-02-22-N1开机挂载NTFS分区/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n安装ntfs-3g  \n<pre><code class=\"language-css\">root@amlogic:~#apt-get install ntfs-3g</code></pre>\n\n<pre><code class=\"language-css\">root@amlogic:~#fdisk -l</code></pre>\n\n挂载的是一块250G的移动硬盘在下面的一段可以看到  \n/dev/sda1 就是该移动硬盘的文件连接，然后创建了挂载目录  \n<pre><code class=\"language-css\">root@amlogic:~#mkdir -p  /mydisk</code></pre>\n\n编辑开机挂载  \n<pre><code class=\"language-css\">root@amlogic:~#vi /etc/fstab</code></pre>\n\n在尾部插入以下内容 \n<pre><code class=\"language-css\"> /dev/sda1       /media/sda1                ntfs            defaults,noatime                        0 0</code></pre>\n\n重启生效  \n<pre><code class=\"language-css\">root@amlogic:~#reboot</code></pre>","tags":["挂载","N1","斐讯","NAS","samba","NTFS"],"categories":["-N1"]},{"title":"N1配置Apache2多端口多站点","url":"/2019/02/22/2019-02-22-N1配置Apache2多端口多站点/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \n修改 /etc/apache2/ports.conf文件添加一个新的监听端口  \n<pre><code class=\"language-css\">Listen 8080</code></pre>\n\n复制一份配置文件  \n<pre><code class=\"language-css\">cd /etc/apache2/sites-available/\ncp 000-default.conf 001-default.conf</code></pre>\n\n修改001-default.conf中端口与网页路径  \n<pre><code class=\"language-css\"><VirtualHost *:8080>  \nDocumentRoot /media/sda1/www/wwwroot</code></pre>\n\n在配置启动文件夹中建立软链接  \n<pre><code class=\"language-css\">cd /etc/apache2/sites-enabled  \nln -s ../sites-available/001-default.conf 001-default.conf</code></pre>\n\n重启服务  \n<pre><code class=\"language-css\">service apache2 restart</code></pre>","tags":["N1","斐讯","Apache2","站点","多站点","端口","多端口"],"categories":["-N1"]},{"title":"Nextcloud挂载数据盘(NTFS)","url":"/2019/02/22/2019-02-22-Nextcloud挂载数据盘(NTFS)/","content":"armbian版本：ARMBIAN 5.44 user-built Ubuntu 18.04.2 LTS 3.14.29  \n  \nnextcloud部署完后，在数据目录下的file目录下创建挂载NTFS的目录  \n<pre><code class=\"language-css\">root@amlogic:~#mkdir -p /var/www/html/syncloud/data/liangst/files/mydisk</code></pre>\n\n把NTFS挂载在该目录（建议开机挂载）  \n<pre><code class=\"language-css\">root@amlogic:~#mount -t ntfs-3g /dev/sda1 /var/www/html/syncloud/data/liangst/files/mydisk</code></pre>\n\n切换到nextcloud安装目录，执行刷新nextcloud文件目录索引的命令  \n<pre><code class=\"language-css\">root@amlogic:~#cd /var/www/html/syncloud/  \nroot@amlogic:/var/www/html/syncloud/#sudo -u www-data php occ files:scan --all --quiet</code></pre>\n\n如果需要解除挂载磁盘，但又报device is busy\n\n<pre><code class=\"language-css\">fuser -km /var/www/html/syncloud/data/liangst/files/mydisk  \numount -t ntfs-3g /dev/sda1</code></pre>","tags":["挂载","网盘","NTFS","Nextcloud","数据盘"],"categories":["-N1"]},{"title":"Office无法更改加载项解决办法","url":"/2019/02/22/2019-02-22-Office无法更改加载项解决办法/","content":"\n\n修改加载项提示：无法更改 HKEY-LOCAL-MACHINE 中注册的office 加载项的连接状态\n因为权限不足无法修改office加载项，解决办法：找到office安装路径下的office12文件夹，里面运行需修改加载项的软件（如：word等执行文件），右键点击，以管理员身份运行。这样就可以了更改加载项了。","tags":["Windows","Office"],"categories":["-windows"]},{"title":"ubuntu临时或永久修改hostname的方法","url":"/2019/02/20/2019-02-20-ubuntu临时或永久修改hostname的方法/","content":"\n## 1、查看hostname ##\n<pre><code class=\"language-css\">hostname 或 uname -n</code></pre>\n## 2.1、临时修改hostname ##\n<pre><code class=\"language-css\">hostname new_hostname</code></pre>\n## 2.2、永久修改hostname ##\n<pre><code class=\"language-css\">vi /etc/hostname</code></pre>\n直接修改为new_hostname保存\n<pre><code class=\"language-css\">vi /etc/hosts</code></pre>\n修改以下即可：  \n<pre><code class=\"language-css\">127.0.0.1 localhost  \n127.0.1.1 new_hostname</code></pre>\n修改完成！","tags":["hostname","ubuntu"],"categories":["-linux"]},{"title":"centos7添加开机启动服务脚本","url":"/2019/02/20/2019-02-20-centos7添加开机启动服务脚本/","content":"\n## 1、创建自启脚本 ##\n<pre><code class=\"language-css\">vi autostart.sh </code></pre> \n内容开头：  \n<pre><code class=\"language-css\">#!/bin/bash  \n# chkconfig: 2345 10 90   \n# description: autostart.sh</code></pre>\n## 2、将脚本移动到/etc/rc.d/init.d目录下 ##\n<pre><code class=\"language-css\">mv /opt/script/autostart.sh /etc/rc.d/init.d</code></pre>\n## 3、增加脚本的可执行权限 ##\n<pre><code class=\"language-css\">chmod +x /etc/rc.d/init.d/autostart.sh</code></pre>\n## 4、添加脚本到开机自动启动项目中 ##\n<pre><code class=\"language-css\">cd /etc/rc.d/init.d  \nchkconfig --add autostart.sh  \nchkconfig autostart.sh on</code></pre>\n大功告成！重启CENTOS7试试看呗~","tags":["自启","脚本","开机启动","centos","centos7","服务"],"categories":["-linux"]},{"title":"花生壳（公网版）移植到arm","url":"/2019/02/20/2019-02-20-花生壳（公网版）移植到arm/","content":"\n## 1、安装必要的开发包   ##\n<pre><code class=\"language-css\">[root@localhost~]#yum install gcc gcc-c++ autoconf automake  \n[root@localhost~]#tar zxvf gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz  \n[root@localhost~]#cd gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin  \n[root@localhost~]#pwd  \n[root@localhost~]#vi /etc/profile  \n在结尾加上export PATH=$PATH:/root/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin（pwd得到的路径）  \n[root@localhost~]#source /etc/profile  \n[root@localhost~]#aarch64-linux-gnu-gcc -v</code></pre>\n没报错就OK了\n\n## 2、下载phddns-2.0.2.16556.tar.gz到某一个目录 ##\n<pre><code class=\"language-css\">[root@localhost~]#wget http://download.oray.com/peanuthull/phddns-2.0.2.16556.tar.gz</code></pre>\n\n## 3、解压所有文件 ##\n<pre><code class=\"language-css\">[root@localhost~]#tar zxvf phddns-2.0.2.16556.tar.gz</code></pre>\n\n## 4、进入目录并编译 ##\n<pre><code class=\"language-css\">[root@localhost~]#cd phddns-2.0.2.16556  \n[root@localhostphddns-2.0.2.16556]#aclocal  \n[root@localhostphddns-2.0.2.16556]#autoconf  \n[root@localhostphddns-2.0.2.16556]#automake  \n[root@localhostphddns-2.0.2.16556]#./configure --host=i386-linux --target=aarch64-linux-gnu-gcc --build=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-gcc CC=aarch64-linux-gnu-gcc LD= aarch64-linux-gnu-gcc-ld  \n[root@localhostphddns-2.0.2.16556]#make</code></pre>\n文件备用：[https://pan.baidu.com/s/1Vsjm8HJ_it_adAujOtb6jQ](https://pan.baidu.com/s/1Vsjm8HJ_it_adAujOtb6jQ \"phddns-2.0.2.16556.tar.gz\")","tags":["花生壳","oray","公网版","移植","arm"],"categories":["-linux"]},{"title":"使用GDList挂载Google Drive和OneDrive网盘","url":"/2019/02/20/2019-02-20-使用GDList挂载Google Drive和OneDrive网盘/","content":"# 简介 #\nGDList可以将Google Drive和OneDrive分享出的文件夹ID挂载成网盘。即使你没网盘也没关系。还不占服务器空间，不消耗服务器流量；可多个Google Drive和OneDrive同时挂载到网盘；支持直链下载、在线预览（图片、视频、音频）。\nGithub地址：https://github.com/reruin/gdlist\n\n系统要求：CentOS、Debian、Ubuntu\n运行命令：\n\n## Debian/Ubuntu系统 ##\n<pre><code class=\"language-css\">apt-get -y install git</code></pre>\n## CentOS/RHEL系统 ##\n<pre><code class=\"language-css\">yum -y install git</code></pre>\n## 下载源码安装 ##\n<pre><code class=\"language-css\">git clone https://github.com/reruin/sharelist.git\ncd sharelist && bash install.sh</code></pre>\n完成后，访问http://ip:33001 进入界面开始设置，记住网盘文件夹要共享一下，不然会出现500错误。  \n![](https://raw.githubusercontent.com/a512154224/a512154224.github.io/master/picture/1004489020.png)  \n注意输入的ID，添加后记得清空缓存。\n\n## Google Drive ##\n分享链接一般是https://drive.google.com/drive/folders/xxxx?usp=sharing 则ID为xxxx。\n\n## OneDrive ##\n分享链接一般是https://1drv.ms/f/xxxx 则ID为xxxx。\n","tags":["挂载","GoogleDrive","OneDrive","网盘","GDList"],"categories":["-linux"]},{"title":"编译安装N2N（centos7）","url":"/2019/02/20/2019-02-20-编译安装N2N（centos7）/","content":"\n## 1、安装依赖包 ##\n<pre><code class=\"language-css\">yum install subversion gcc-c++ openssl-devel git cmake</code></pre>\n## 2、下载n2n源码包 ##\n<pre><code class=\"language-css\">git clone https://github.com/meyerd/n2n.git\n</code></pre>\n## 3、编译 ##\n<pre><code class=\"language-css\">cd n2n/n2n_v2  \nmkdir build  \ncd build  \ncmake ..  \nmake  \nmake install</code></pre>\n## a、开启supernode服务端口 ##\n<pre><code class=\"language-css\">supernode -l 1000</code></pre>\n## b、开启edge客户端 ##\n<pre><code class=\"language-css\">edge -d test02 -c test -k key -a 10.0.0.2 -l 140.143.150.150:1000 >/dev/null &</code></pre>","tags":["编译","n2n","内网穿透","内网映射","穿透","映射"],"categories":["-linux"]},{"title":"window10添加右键打开CMD","url":"/2019/02/20/2019-02-20-window10添加右键打开CMD/","content":"\n把以下内容复制到新建文本add_cmd.reg文件里，双击运行即可：\n\n<pre><code class=\"language-css\">Windows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINESOFTWAREClassesDirectorybackgroundshellcmd_here]\n\n@=\"在此处打开命令行\"\n\"Icon\"=\"cmd.exe\"\n\n[HKEY_LOCAL_MACHINESOFTWAREClassesDirectorybackgroundshellcmd_herecommand]\n\n@=\"\"C:\\Windows\\System32\\cmd.exe\"\"\n\n[HKEY_LOCAL_MACHINESOFTWAREClassesFoldershellcmdPrompt]\n\n@=\"在此处打开命令行\"\n\n[HKEY_LOCAL_MACHINESOFTWAREClassesFoldershellcmdPromptcommand]\n\n@=\"\"C:\\Windows\\System32\\cmd.exe\" \"cd %1\"\"\n\n[HKEY_LOCAL_MACHINESOFTWAREClassesDirectoryshellcmd_here]\n\n@=\"在此处打开命令行\"\n\"Icon\"=\"cmd.exe\"\n\n[HKEY_LOCAL_MACHINESOFTWAREClassesDirectoryshellcmd_herecommand]\n\n@=\"\"C:\\Windows\\System32\\cmd.exe\"\"</code></pre>","tags":["命令","cmd","windows"],"categories":["-windows"]}]